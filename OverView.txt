Creating the base set up for a Flask app
this is in order for me to have an initial
set up so I do not need to remake everything
every time I create an app.

Everything is set up at a basic level
and open to customization

Flask Libraries installed:
gunicorn - for Heroku
SQLAlchemy - DB ORM
Flask-Manager - To handle commands
Flask-Migrate - Handle DB migrations
psychogres2 - Postgres db ability
Flask-WTF - For forms
Flask-Testing
Flask-Login
Flask-Assets

** Remember when setting up psql run:
  CREATE DATABASE <Name of DATABASE_URL>

For python buildpack run:
heroku buildpacks:set https://github.com/heroku/heroku-buildpack-python

For multibuildpacks:
https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app

OS ENV VARS need to be set:
Local Vars:
DATABASE_URL='postgresql://localhost/kyle_blog'
APP_SETTINGS=config.DevelopmentConfig

Heroku or other service vars
DATABASE_URL='URL for DB'
APP_SETTINGS=config.ProductionConfig

To Add to the database:
**********************
Many to Many relationship example
tags = db.Table('tags',
    db.Column('tag_id', db.Integer, db.ForeignKey('hashtags.id')),
    db.Column('post_id', db.Integer, db.ForeignKey('posts.id'))
)
* IN Post
tags = db.relationship('Tag', secondary=tags,
    backref=db.backref('posts', lazy='dynamic'))

Class Tag(db.Model):

  __tablename__ = 'hashtags'
  id = db.Column(db.Integer, primary_key=True)
  name = db.Column(db.String)
**********************
One to Many:

class Post(db.Model):
  author_id = db.Column(db.Integer, ForeignKey('users.id'))


class User(db.Model):
  posts = relationship('Post', backref='author', cascade='all')
